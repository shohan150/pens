@import url("https://fonts.googleapis.com/css2?family=Inter:wght@200;300;400;500;600;700;800;900&display=swap");

/* CSS RESET */
* {
  box-sizing: border-box;
}

body {
  padding: 0;
  margin: 0;
  font-family: "Inter", sans-serif;

  overflow-x: hidden;
  background-color: #080202;
  color: #fff;
}

h1,
h2,
h3,
h4,
h5,
h6,
p,
hr {
  margin: 0;
  padding: 0;
}

p {
  margin: 20px 0;
  font-size: 20px;
  line-height: 2;
  font-weight: 200;
}

img {
  display: block;
  padding: 0;
  margin: 0;
}

/* CLASS STYLES */
.main-section {
  padding: 70px 0;
  width: 80%;
  margin: 0 auto;
}

.img_container {
  width: 100%;
  height: 80vh;
}

.img_container img,
.tWrap img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center;
}

.top_img {
  position: relative;
}

.top_img img {
  position: absolute;
  z-index: -1;
  animation: fade-out linear forwards;
  /* forwards: This sets the animation-fill-mode to forwards. It means that when the animation finishes, the element will retain the styles applied by the last keyframe of the animation. */
  animation-timeline: view();
  /* animation-timeline that connects animation to scroll. This is the crucial part that links the animation to the scroll position. view() creates a scroll-driven animation timeline. The progress of the animation is directly tied to the visibility of the element within the viewport (the visible area of the browser window). */
  animation-range: exit;
  /* This property, used in conjunction with animation-timeline: view(), defines the range of the animation's progress. This keyword means the animation will play as the element leaves the viewport. The animation will start when the element begins to move out of the viewport and will complete when the element is fully outside the viewport. */
  top: 0px;
}

.img_container.top_img {
  display: flex;
  justify-content: center;
  align-items: flex-end;
}

.anime_img {
  object-fit: cover;
  animation: img_key linear forwards;
  animation-timeline: view();
  animation-range: cover 0% cover 20%;
  /* Start the animation as soon as the element begins to become visible in the viewport (the beginning of the 'cover' range) and finish the animation when the element has progressed 20% through its entire visibility cycle (from just entering to completely exiting the 'cover' range). 
  
  It determines at what point along the animation timeline (which is linked to scrolling in this case; view()) the animation should begin and end. cover: tracks the visibility of the element within its scroll container. The cover range spans from the moment the element starts entering the viewport until the moment it has completely left the viewport. 0% (after the first cover): This value specifies the starting point of the animation within the cover range. 0% indicates the very beginning of the cover range, meaning the animation will start as soon as the element begins to enter the viewport. The second cover specifies the ending point of the animation within the cover range. 20% means the animation will complete when the element has progressed 20% through its visibility journey from just entering to fully being outside the viewport. */
}

section .tWrap {
  perspective: 1000px;
  /* defines how far the object is away from the user. So, a lower value will result in a more intensive 3D effect than a higher value. When defining the perspective property for an element, it is the CHILD elements that get the perspective view, NOT the element itself. 
  
  1000px * 40deg is same as 100px * 4deg. So, in this case, the perspective value is a multiplier of the angle. The higher the perspective value, the less intense the 3D effect will be.
  */
}

.box {
  animation: noTransformAnim linear forwards normal;
  animation-timeline: view();
  transform: rotateX(80deg);
  opacity: 0;
}

@keyframes noTransformAnim {
  50% {
    transform: none;
    opacity: 1;
  }
  100% {
    transform: none;
    opacity: 1;
  }
}

@keyframes img_key {
  0% {
    clip-path: polygon(50% 0, 50% 0, 50% 100%, 50% 100%);
  }
  100% {
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
  }
}

@keyframes fade-out {
  100% {
    opacity: 0;
    scale: 1.5;
  }
}
